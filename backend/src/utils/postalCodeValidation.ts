// International postal code validation patterns
export const POSTAL_CODE_PATTERNS: Record<
  string,
  { regex: RegExp; example: string }
> = {
  US: { regex: /^\d{5}(-\d{4})?$/, example: "12345 or 12345-6789" },
  BR: { regex: /^\d{5}-?\d{3}$/, example: "12345-678 or 12345678" },
  CA: {
    regex: /^[A-Za-z]\d[A-Za-z]\s?\d[A-Za-z]\d$/,
    example: "K1A 0A6 or K1A0A6",
  },
  GB: {
    regex: /^[A-Z]{1,2}\d[A-Z\d]?\s?\d[A-Z]{2}$/i,
    example: "SW1A 1AA or M1 1AA",
  },
  DE: { regex: /^\d{5}$/, example: "12345" },
  FR: { regex: /^\d{5}$/, example: "75001" },
  MX: { regex: /^\d{5}$/, example: "01000" },
  AR: { regex: /^[A-Z]?\d{4}[A-Z]{3}$|^\d{4}$/i, example: "C1002AAA or 1234" },
  JP: { regex: /^\d{3}-?\d{4}$/, example: "123-4567 or 1234567" },
  IN: { regex: /^\d{6}$/, example: "110001" },
  AU: { regex: /^\d{4}$/, example: "2000" },
  IT: { regex: /^\d{5}$/, example: "00118" },
  ES: { regex: /^\d{5}$/, example: "28001" },
  NL: { regex: /^\d{4}\s?[A-Z]{2}$/i, example: "1234 AB or 1234AB" },
  CH: { regex: /^\d{4}$/, example: "8001" },
  SE: { regex: /^\d{3}\s?\d{2}$/, example: "123 45 or 12345" },
  NO: { regex: /^\d{4}$/, example: "0001" },
  DK: { regex: /^\d{4}$/, example: "1000" },
  FI: { regex: /^\d{5}$/, example: "00100" },
  BE: { regex: /^\d{4}$/, example: "1000" },
  AT: { regex: /^\d{4}$/, example: "1010" },
  PL: { regex: /^\d{2}-?\d{3}$/, example: "00-950 or 00950" },
  RU: { regex: /^\d{6}$/, example: "101000" },
  CN: { regex: /^\d{6}$/, example: "100000" },
  KR: { regex: /^\d{5}$/, example: "03001" },
  SG: { regex: /^\d{6}$/, example: "018956" },
  MY: { regex: /^\d{5}$/, example: "50000" },
  TH: { regex: /^\d{5}$/, example: "10100" },
  PH: { regex: /^\d{4}$/, example: "1000" },
  ID: { regex: /^\d{5}$/, example: "10110" },
  VN: { regex: /^\d{6}$/, example: "100000" },
  ZA: { regex: /^\d{4}$/, example: "0001" },
  EG: { regex: /^\d{5}$/, example: "11511" },
  NG: { regex: /^\d{6}$/, example: "100001" },
  KE: { regex: /^\d{5}$/, example: "00100" },
  GH: { regex: /^[A-Z]{2}-?\d{3}-?\d{4}$/i, example: "GA-123-4567" },
  MA: { regex: /^\d{5}$/, example: "10000" },
  TN: { regex: /^\d{4}$/, example: "1000" },
  DZ: { regex: /^\d{5}$/, example: "16000" },
  LY: { regex: /^\d{5}$/, example: "21335" },
  SA: { regex: /^\d{5}(-?\d{4})?$/, example: "12345 or 12345-1234" },
  AE: { regex: /^\d{5}$/, example: "12345" },
  KW: { regex: /^\d{5}$/, example: "12345" },
  QA: { regex: /^\d{5}$/, example: "12345" },
  BH: { regex: /^\d{3,4}$/, example: "123 or 1234" },
  OM: { regex: /^\d{3}$/, example: "123" },
  JO: { regex: /^\d{5}$/, example: "11118" },
  LB: { regex: /^\d{4}\s?\d{4}$/, example: "1107 2810" },
  SY: { regex: /^\d{6}$/, example: "123456" },
  IQ: { regex: /^\d{5}$/, example: "10001" },
  IR: { regex: /^\d{10}$/, example: "1234567890" },
  AF: { regex: /^\d{4}$/, example: "1001" },
  PK: { regex: /^\d{5}$/, example: "44000" },
  BD: { regex: /^\d{4}$/, example: "1000" },
  LK: { regex: /^\d{5}$/, example: "10100" },
  NP: { regex: /^\d{5}$/, example: "44600" },
  MM: { regex: /^\d{5}$/, example: "11181" },
  KH: { regex: /^\d{5}$/, example: "12000" },
  LA: { regex: /^\d{5}$/, example: "01000" },
  MN: { regex: /^\d{6}$/, example: "210000" },
  KZ: { regex: /^\d{6}$/, example: "010000" },
  UZ: { regex: /^\d{6}$/, example: "100000" },
  KG: { regex: /^\d{6}$/, example: "720000" },
  TJ: { regex: /^\d{6}$/, example: "734000" },
  TM: { regex: /^\d{6}$/, example: "744000" },
  GE: { regex: /^\d{4}$/, example: "0101" },
  AM: { regex: /^\d{4}$/, example: "0001" },
  AZ: { regex: /^AZ\s?\d{4}$/i, example: "AZ1000 or AZ 1000" },
  TR: { regex: /^\d{5}$/, example: "06100" },
  GR: { regex: /^\d{3}\s?\d{2}$/, example: "123 45 or 12345" },
  CY: { regex: /^\d{4}$/, example: "1055" },
  MT: { regex: /^[A-Z]{3}\s?\d{2,4}$/i, example: "VLT 1117" },
  BG: { regex: /^\d{4}$/, example: "1000" },
  RO: { regex: /^\d{6}$/, example: "010000" },
  MD: { regex: /^MD-?\d{4}$/i, example: "MD-2012 or MD2012" },
  UA: { regex: /^\d{5}$/, example: "01001" },
  BY: { regex: /^\d{6}$/, example: "220000" },
  LT: { regex: /^LT-?\d{5}$/i, example: "LT-01513 or LT01513" },
  LV: { regex: /^LV-?\d{4}$/i, example: "LV-1050 or LV1050" },
  EE: { regex: /^\d{5}$/, example: "10101" },
  CZ: { regex: /^\d{3}\s?\d{2}$/, example: "123 45 or 12345" },
  SK: { regex: /^\d{3}\s?\d{2}$/, example: "123 45 or 12345" },
  HU: { regex: /^\d{4}$/, example: "1011" },
  SI: { regex: /^\d{4}$/, example: "1000" },
  HR: { regex: /^\d{5}$/, example: "10000" },
  BA: { regex: /^\d{5}$/, example: "71000" },
  RS: { regex: /^\d{5}$/, example: "11000" },
  ME: { regex: /^\d{5}$/, example: "81000" },
  MK: { regex: /^\d{4}$/, example: "1000" },
  AL: { regex: /^\d{4}$/, example: "1001" },
  XK: { regex: /^\d{5}$/, example: "10000" }, // Kosovo
  IS: { regex: /^\d{3}$/, example: "101" },
  PT: { regex: /^\d{4}-?\d{3}$/, example: "1000-001 or 1000001" },
  IE: { regex: /^[A-Z]\d{2}\s?[A-Z\d]{4}$/i, example: "D02 XY45" },
  LU: { regex: /^L-?\d{4}$/i, example: "L-1234 or L1234" },
  MC: { regex: /^980\d{2}$/, example: "98000" },
  AD: { regex: /^AD\d{3}$/i, example: "AD100" },
  SM: { regex: /^4789\d$/, example: "47890" },
  VA: { regex: /^00120$/, example: "00120" },
  LI: { regex: /^948[5-9]$/, example: "9485" },
  GT: { regex: /^\d{5}$/, example: "01001" },
  BZ: { regex: /^[A-Z]{2}\s?\d{4}$/i, example: "BZ 1234" },
  SV: { regex: /^\d{4}$/, example: "1101" },
  HN: { regex: /^\d{5}$/, example: "11101" },
  NI: { regex: /^\d{5}$/, example: "10000" },
  CR: { regex: /^\d{5}$/, example: "10101" },
  PA: { regex: /^\d{4}$/, example: "0801" },
  CU: { regex: /^\d{5}$/, example: "10100" },
  JM: { regex: /^[A-Z]{4}\s?\d{2}$/i, example: "JMAA 01" },
  HT: { regex: /^HT\d{4}$/i, example: "HT1110" },
  DO: { regex: /^\d{5}$/, example: "10101" },
  TT: { regex: /^\d{6}$/, example: "100101" },
  BB: { regex: /^BB\d{5}$/i, example: "BB11000" },
  GD: { regex: /^\d{5}$/, example: "12345" },
  LC: { regex: /^LC\d{2}\s?\d{3}$/i, example: "LC14 640" },
  VC: { regex: /^VC\d{4}$/i, example: "VC0100" },
  AG: { regex: /^\d{5}$/, example: "12345" },
  KN: { regex: /^\d{5}$/, example: "12345" },
  DM: { regex: /^\d{5}$/, example: "12345" },
  BS: { regex: /^\d{5}$/, example: "12345" },
  CO: { regex: /^\d{6}$/, example: "110111" },
  VE: { regex: /^\d{4}(-?[A-Z])?$/i, example: "1010 or 1010-A" },
  GY: { regex: /^\d{6}$/, example: "110001" },
  SR: { regex: /^\d{6}$/, example: "110001" },
  GF: { regex: /^973\d{2}$/, example: "97300" },
  EC: { regex: /^\d{6}$/, example: "170101" },
  PE: { regex: /^\d{5}$/, example: "15001" },
  BO: { regex: /^\d{4}$/, example: "0001" },
  PY: { regex: /^\d{4}$/, example: "1001" },
  UY: { regex: /^\d{5}$/, example: "11000" },
  CL: { regex: /^\d{7}$/, example: "1234567" },
  FK: { regex: /^FIQQ\s?1ZZ$/i, example: "FIQQ 1ZZ" },
  NZ: { regex: /^\d{4}$/, example: "1010" },
  FJ: { regex: /^\d{5}$/, example: "12345" },
  PG: { regex: /^\d{3}$/, example: "111" },
  SB: { regex: /^\d{5}$/, example: "12345" },
  VU: { regex: /^\d{5}$/, example: "12345" },
  NC: { regex: /^988\d{2}$/, example: "98800" },
  PF: { regex: /^987\d{2}$/, example: "98700" },
  WF: { regex: /^986\d{2}$/, example: "98600" },
  WS: { regex: /^WS\d{4}$/i, example: "WS1234" },
  TO: { regex: /^\d{5}$/, example: "12345" },
  TV: { regex: /^\d{5}$/, example: "12345" },
  NR: { regex: /^\d{5}$/, example: "12345" },
  KI: { regex: /^\d{5}$/, example: "12345" },
  MH: { regex: /^\d{5}$/, example: "96960" },
  FM: { regex: /^\d{5}$/, example: "96941" },
  PW: { regex: /^\d{5}$/, example: "96940" },
  GU: { regex: /^\d{5}$/, example: "96910" },
  MP: { regex: /^\d{5}$/, example: "96950" },
  AS: { regex: /^\d{5}$/, example: "96799" },
  VI: { regex: /^\d{5}$/, example: "00801" },
  PR: { regex: /^\d{5}(-\d{4})?$/, example: "00901 or 00901-1234" },
};

export function validatePostalCode(
  postalCode: string,
  countryCode: string
): { isValid: boolean; message?: string } {
  const pattern = POSTAL_CODE_PATTERNS[countryCode.toUpperCase()];

  if (!pattern) {
    return {
      isValid: false,
      message: `Postal code validation not supported for country: ${countryCode}`,
    };
  }

  const isValid = pattern.regex.test(postalCode.trim());

  if (!isValid) {
    return {
      isValid: false,
      message: `Invalid postal code format for ${countryCode}. Expected format: ${pattern.example}`,
    };
  }

  return { isValid: true };
}

export function getSupportedCountries(): string[] {
  return Object.keys(POSTAL_CODE_PATTERNS);
}

export function getPostalCodeExample(countryCode: string): string {
  const pattern = POSTAL_CODE_PATTERNS[countryCode.toUpperCase()];
  return pattern ? pattern.example : "Format not available";
}
